name: Deploy to Cloudflare

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm

      - name: Fetch Cloudflare Account ID
        id: fetch_account_id
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          if [[ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          else
            ID=$(curl -sS \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              https://api.cloudflare.com/client/v4/accounts \
              | jq -r '.result[0].id')
            [[ "$ID" != "null" ]] || { echo "No account ID!" >&2; exit 1; }
            echo "account_id=$ID" >> $GITHUB_OUTPUT
          fi

      - name: Create dummy worker (subdomain workaround)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
        run: |
          curl -sS -X PUT \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/javascript" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy" \
            --data 'addEventListener("fetch",e=>e.respondWith(new Response("OK")))' || true
          curl -sS -X DELETE \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy" || true

      - name: Install dependencies
        run: |
          npm install
          cd worker && npm install

      - name: Emit .env.production
        run: |
          cat > .env.production <<EOF
          PLEX=${{ secrets.PLEX }}
          OVERSEERR=${{ secrets.OVERSEERR }}
          RADARR=${{ secrets.RADARR }}
          SONARR=${{ secrets.SONARR }}
          NZBGET=${{ secrets.NZBGET }}
          UN_SERVER=${{ secrets.UN_SERVER }}
          CLOUDFLARE=${{ secrets.CLOUDFLARE }}
          HA=${{ secrets.HA }}
          UPTIME_KEY=${{ secrets.UPTIME_KEY }}
          EOF

      - name: Build Worker (dry‐run)
        working-directory: worker
        env:
          PLEX: ${{ secrets.PLEX }}
          OVERSEERR: ${{ secrets.OVERSEERR }}
          RADARR: ${{ secrets.RADARR }}
          SONARR: ${{ secrets.SONARR }}
          NZBGET: ${{ secrets.NZBGET }}
          UN_SERVER: ${{ secrets.UN_SERVER }}
          CLOUDFLARE: ${{ secrets.CLOUDFLARE }}
          HA: ${{ secrets.HA }}
          UPTIME_KEY: ${{ secrets.UPTIME_KEY }}
        run: |
          npm ci
          npx wrangler deploy src/index.ts --outdir dist --dry-run

      - name: Publish Worker & inject secrets
        working-directory: worker
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
          PLEX: ${{ secrets.PLEX }}
          OVERSEERR: ${{ secrets.OVERSEERR }}
          RADARR: ${{ secrets.RADARR }}
          SONARR: ${{ secrets.SONARR }}
          NZBGET: ${{ secrets.NZBGET }}
          UN_SERVER: ${{ secrets.UN_SERVER }}
          CLOUDFLARE: ${{ secrets.CLOUDFLARE }}
          HA: ${{ secrets.HA }}
          UPTIME_KEY: ${{ secrets.UPTIME_KEY }}
        run: |
          echo "$PLEX"       | npx wrangler secret put PLEX        --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$OVERSEERR"  | npx wrangler secret put OVERSEERR   --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$RADARR"     | npx wrangler secret put RADARR      --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$SONARR"     | npx wrangler secret put SONARR      --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$NZBGET"     | npx wrangler secret put NZBGET      --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$UN_SERVER"  | npx wrangler secret put UN_SERVER   --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$CLOUDFLARE" | npx wrangler secret put CLOUDFLARE  --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$HA"         | npx wrangler secret put HA          --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          echo "$UPTIME_KEY" | npx wrangler secret put UPTIME_KEY  --account-id $CF_ACCOUNT_ID --script uptimeflare_worker
          npx wrangler deploy src/index.ts --outdir dist

      - name: Build Next.js status-page
        env:
          PLEX: ${{ secrets.PLEX }}
          OVERSEERR: ${{ secrets.OVERSEERR }}
          RADARR: ${{ secrets.RADARR }}
          SONARR: ${{ secrets.SONARR }}
          NZBGET: ${{ secrets.NZBGET }}
          UN_SERVER: ${{ secrets.UN_SERVER }}
          CLOUDFLARE: ${{ secrets.CLOUDFLARE }}
          HA: ${{ secrets.HA }}
          UPTIME_KEY: ${{ secrets.UPTIME_KEY }}
        run: |
          npm ci
          npx @cloudflare/next-on-pages

      - name: Terraform Apply (KV & Pages)
        env:
          CLOUDFLARE_API_TOKEN:      ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
        run: |
          terraform init
          KV_ID=$(curl -sS \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            https://api.cloudflare.com/client/v4/accounts/$TF_VAR_CLOUDFLARE_ACCOUNT_ID/storage/kv/namespaces?per_page=100 \
            | jq -r '.result[] | select(.title=="uptimeflare_kv") | .id')
          if [[ -n "$KV_ID" ]]; then
            terraform import cloudflare_workers_kv_namespace.uptimeflare_kv "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/$KV_ID"
            terraform import cloudflare_pages_project.uptimeflare "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare" || true
          fi
          terraform apply -auto-approve -input=false

      - name: Add durable-objects binding (workaround)
        continue-on-error: true
        env:
          CLOUDFLARE_API_TOKEN:      ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
        run: |
          BINDINGS=$(curl -sS \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
            | jq '.result.bindings | map(select(.type!="durable_object_namespace"))' -jc)
          curl -sS -X PATCH \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -F "settings={\"bindings\":$BINDINGS}" \
            https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings
          curl -sS -X PATCH \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"observability":{"enabled":true}}' \
            https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/script-settings

      - name: Upload pages to Cloudflare Pages
        env:
          CF_API_TOKEN:    ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
        run: |
          npx wrangler pages deploy .vercel/output/static --project-name uptimeflare