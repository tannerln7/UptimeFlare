name: Deploy to Cloudflare

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.6.4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Fetch Account ID
        id: fetch_account_id
        run: |
          if [[ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "Using provided CLOUDFLARE_ACCOUNT_ID from secrets."
            echo "account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          else
            ACCOUNT_ID=$(curl -s -X GET \
              "https://api.cloudflare.com/client/v4/accounts" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type:application/json" \
              | jq -r ".result[0].id")
            if [[ "$ACCOUNT_ID" == "null" ]]; then
              echo "Failed to get an account id."
              exit 1
            fi
            echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Create worker subdomain (temporary workaround)
        run: |
          curl --request PUT --fail-with-body \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy-ib4db6ntj5csdef3 \
               --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               --header "Content-Type: application/javascript" \
               --data 'addEventListener("fetch", event => event.respondWith(new Response("OK")))'
          curl --request DELETE --fail-with-body \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy-ib4db6ntj5csdef3 \
               --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               --header "Content-Type: application/json"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Install dependencies
        run: |
          npm install
          cd worker
          npm install

      - name: Emit .env.production
        run: |
          cat <<EOF > .env.production
          PLEX=${{ secrets.PLEX }}
          OVERSEERR=${{ secrets.OVERSEERR }}
          RADARR=${{ secrets.RADARR }}
          SONARR=${{ secrets.SONARR }}
          NZBGET=${{ secrets.NZBGET }}
          UN_SERVER=${{ secrets.UN_SERVER }}
          CLOUDFLARE=${{ secrets.CLOUDFLARE }}
          HA=${{ secrets.HA }}
          UPTIME_KEY=${{ secrets.UPTIME_KEY }}
          EOF

      - name: Build Worker (dry-run)
        run: |
          cd worker
          npm ci
          npx wrangler deploy src/index.ts --outdir dist --dry-run
        env:
          PLEX:          ${{ secrets.PLEX }}
          OVERSEERR:     ${{ secrets.OVERSEERR }}
          RADARR:        ${{ secrets.RADARR }}
          SONARR:        ${{ secrets.SONARR }}
          NZBGET:        ${{ secrets.NZBGET }}
          UN_SERVER:     ${{ secrets.UN_SERVER }}
          CLOUDFLARE:    ${{ secrets.CLOUDFLARE }}
          HA:            ${{ secrets.HA }}
          UPTIME_KEY:    ${{ secrets.UPTIME_KEY }}
          CF_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
          CF_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: inject secrets
        working-directory: worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          PLEX:         ${{ secrets.PLEX }}
          OVERSEERR:    ${{ secrets.OVERSEERR }}
          RADARR:       ${{ secrets.RADARR }}
          SONARR:       ${{ secrets.SONARR }}
          NZBGET:       ${{ secrets.NZBGET }}
          UN_SERVER:    ${{ secrets.UN_SERVER }}
          CLOUDFLARE:   ${{ secrets.CLOUDFLARE }}
          HA:           ${{ secrets.HA }}
          UPTIME_KEY:   ${{ secrets.UPTIME_KEY }}
        run: |
          echo "$PLEX"       | npx wrangler secret put PLEX
          echo "$OVERSEERR"  | npx wrangler secret put OVERSEERR
          echo "$RADARR"     | npx wrangler secret put RADARR
          echo "$SONARR"     | npx wrangler secret put SONARR
          echo "$NZBGET"     | npx wrangler secret put NZBGET
          echo "$UN_SERVER"  | npx wrangler secret put UN_SERVER
          echo "$CLOUDFLARE" | npx wrangler secret put CLOUDFLARE
          echo "$HA"         | npx wrangler secret put HA
          echo "$UPTIME_KEY" | npx wrangler secret put UPTIME_KEY

      - name: Install & Build status-page
        run: |
          npm ci
          npx @cloudflare/next-on-pages
        env:
          PLEX:          ${{ secrets.PLEX }}
          OVERSEERR:     ${{ secrets.OVERSEERR }}
          RADARR:        ${{ secrets.RADARR }}
          SONARR:        ${{ secrets.SONARR }}
          NZBGET:        ${{ secrets.NZBGET }}
          UN_SERVER:     ${{ secrets.UN_SERVER }}
          CLOUDFLARE:    ${{ secrets.CLOUDFLARE }}
          HA:            ${{ secrets.HA }}
          UPTIME_KEY:    ${{ secrets.UPTIME_KEY }}

      - name: Remove durable objects bindings (temporary workaround)
        continue-on-error: true
        run: |
          NEW_BINDINGS=$(curl -s \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            | jq '.result.bindings | map(select(.type != "durable_object_namespace"))')
          curl --request PATCH \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -F "settings={\"bindings\":$NEW_BINDINGS}"
        env:
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Deploy using Terraform
        run: |
          terraform init

          KV_ID=$(curl -s \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$TF_VAR_CLOUDFLARE_ACCOUNT_ID/storage/kv/namespaces?per_page=100" \
            | jq -r '.result[] | select(.title=="uptimeflare_kv") | .id')
          if [ -n "$KV_ID" ]; then
            terraform import cloudflare_workers_kv_namespace.uptimeflare_kv \
              "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/$KV_ID"
            terraform import cloudflare_pages_project.uptimeflare \
              "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare" || true
          fi

          terraform apply -auto-approve -input=false
        env:
          CLOUDFLARE_API_TOKEN:        ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
          TF_VAR_PLEX_URL:             ${{ secrets.PLEX }}
          TF_VAR_OVERSEERR_URL:        ${{ secrets.OVERSEERR }}
          TF_VAR_RADARR_URL:           ${{ secrets.RADARR }}
          TF_VAR_SONARR_URL:           ${{ secrets.SONARR }}
          TF_VAR_NZBGET_URL:           ${{ secrets.NZBGET }}
          TF_VAR_UN_SERVER_URL:        ${{ secrets.UN_SERVER }}
          TF_VAR_CLOUDFLARE_URL:       ${{ secrets.CLOUDFLARE }}
          TF_VAR_HA_URL:               ${{ secrets.HA }}
          TF_VAR_UPTIME_KEY:           ${{ secrets.UPTIME_KEY }}

      - name: Add durable objects bindings
        run: |
          CURRENT_BINDINGS=$(curl -s \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            | jq '.result.bindings')
          # Migrate
          curl --request PATCH \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -F "settings={\"bindings\":[{\"type\":\"durable_object_namespace\",\"name\":\"REMOTE_CHECKER_DO\",\"class_name\":\"RemoteChecker\"},$CURRENT_BINDINGS],\"migrations\":{\"new_sqlite_classes\":[\"RemoteChecker\"],\"new_tag\":\"v1\"}}"
          # Actually add
          curl --request PATCH \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               -F "settings={\"bindings\":[{\"type\":\"durable_object_namespace\",\"name\":\"REMOTE_CHECKER_DO\",\"class_name\":\"RemoteChecker\"},$CURRENT_BINDINGS]}"
          # Enable logs
          curl --request PATCH \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/script-settings \
               --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
               --header "Content-Type: application/json" \
               -d '{"observability":{"enabled":true}}'
        env:
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Upload Pages
        run: |
          npx wrangler pages deploy .vercel/output/static --project-name uptimeflare
        env:
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}