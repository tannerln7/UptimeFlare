name: Deploy to Cloudflare

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # … your Terraform & dummy‐worker steps …

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          cache: 'npm'

      # 1️⃣ Generate a `.env.production` right before building…
      - name: Emit .env.production
        run: |
          cat <<EOF > .env.production
          PLEX=${{ secrets.PLEX }}
          OVERSEERR=${{ secrets.OVERSEERR }}
          RADARR=${{ secrets.RADARR }}
          SONARR=${{ secrets.SONARR }}
          NZBGET=${{ secrets.NZBGET }}
          UN_SERVER=${{ secrets.UN_SERVER }}
          CLOUDFLARE=${{ secrets.CLOUDFLARE }}
          HA=${{ secrets.HA }}
          UPTIME_KEY=${{ secrets.UPTIME_KEY }}
          EOF

      # 2️⃣ Install & build your Worker (still “dry‐run” so you can inject secrets via Wrangler)
      - name: Build Worker (dry-run)
        run: |
          cd worker
          npm ci
          npx wrangler deploy src/index.ts --outdir dist --dry-run
        env:
          # Wrangler will pick these up as bindings
          PLEX:          ${{ secrets.PLEX }}
          OVERSEERR:     ${{ secrets.OVERSEERR }}
          RADARR:        ${{ secrets.RADARR }}
          SONARR:        ${{ secrets.SONARR }}
          NZBGET:        ${{ secrets.NZBGET }}
          UN_SERVER:     ${{ secrets.UN_SERVER }}
          CLOUDFLARE:    ${{ secrets.CLOUDFLARE }}
          HA:            ${{ secrets.HA }}
          UPTIME_KEY:    ${{ secrets.UPTIME_KEY }}
          CF_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
          CF_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}

      # 3️⃣ Install & build your Next.js status-page
      - name: Install & Build status-page
        env:
          # Next-on-Pages sees these at build-time
          PLEX:          ${{ secrets.PLEX }}
          OVERSEERR:     ${{ secrets.OVERSEERR }}
          RADARR:        ${{ secrets.RADARR }}
          SONARR:        ${{ secrets.SONARR }}
          NZBGET:        ${{ secrets.NZBGET }}
          UN_SERVER:     ${{ secrets.UN_SERVER }}
          CLOUDFLARE:    ${{ secrets.CLOUDFLARE }}
          HA:            ${{ secrets.HA }}
          UPTIME_KEY:    ${{ secrets.UPTIME_KEY }}
        run: |
          npm ci
          npx @cloudflare/next-on-pages

      # 4️⃣ Terraform + durable objects + Pages deploy
      - name: Remove durable objects bindings (temporary workaround)
        continue-on-error: true
        # This is a workaround to fix Cloudflare provider 4.x import crash when there's a durable object binding.
        run: |
          # Get bindings without durable objects
          NEW_BINDINGS=$(curl --request GET --fail-with-body \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header 'Authorization: Bearer '$CLOUDFLARE_API_TOKEN \
               --header 'Content-Type: application/json' | jq '.result.bindings | map(select(.type != "durable_object_namespace"))' -jc)
          echo "New bindings: $NEW_BINDINGS"

          # Remove durable objects bindings
          curl --request PATCH --fail-with-body \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header 'Authorization: Bearer '$CLOUDFLARE_API_TOKEN \
               -F 'settings={"bindings":'$NEW_BINDINGS'}'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Deploy using Terraform
        # As we don't save terraform state somewhere, we need to import the existing resources
        run: |
          terraform init

          KV_ID=$(curl https://api.cloudflare.com/client/v4/accounts/$TF_VAR_CLOUDFLARE_ACCOUNT_ID/storage/kv/namespaces\?per_page\=100 --header 'Authorization: Bearer '$CLOUDFLARE_API_TOKEN | jq -r '.result[] | select(.title == "uptimeflare_kv") | .id')
          if [ -n "$KV_ID" ]; then
            echo "Importing existing resources..."
            terraform import cloudflare_workers_kv_namespace.uptimeflare_kv "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/$KV_ID"
            terraform import cloudflare_worker_script.uptimeflare "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare_worker"
            terraform import cloudflare_worker_cron_trigger.uptimeflare_worker_cron "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare_worker"
            terraform import cloudflare_pages_project.uptimeflare "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare"
          else
            echo "KV namespace not found, first-time setup."
          fi

          terraform apply -auto-approve -input=false
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      # Terraform Cloudflare provider 4.x doesn't support durable objects, provider 5.x has unresolved issues blocking the deployment. (cloudflare/terraform-provider-cloudflare#5412)
      # So I have to manually add durable objects bindings here.
      - name: Add durable objects bindings
        run: |
          # Get current bindings
          CURRENT_BINDINGS=$(curl --request GET --fail-with-body \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header 'Authorization: Bearer '$CLOUDFLARE_API_TOKEN \
               --header 'Content-Type: application/json' | jq '.result.bindings' -jc)
          CURRENT_BINDINGS="${CURRENT_BINDINGS:1:-1}"
          echo "Current bindings: $CURRENT_BINDINGS"

          # Try migration first (required for the new durable object class, ignore failures)
          curl --request PATCH \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header 'Authorization: Bearer '$CLOUDFLARE_API_TOKEN \
               -F 'settings={"bindings":[{"type":"durable_object_namespace","name":"REMOTE_CHECKER_DO","class_name":"RemoteChecker"},'$CURRENT_BINDINGS'],"migrations":{"new_sqlite_classes":["RemoteChecker"],"new_tag":"v1"}}'

          # Actually add the binding
          curl --request PATCH --fail-with-body \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings \
               --header 'Authorization: Bearer '$CLOUDFLARE_API_TOKEN \
               -F 'settings={"bindings":[{"type":"durable_object_namespace","name":"REMOTE_CHECKER_DO","class_name":"RemoteChecker"},'$CURRENT_BINDINGS']}'

          # By the ways enable logs
          curl --request PATCH \
               --url https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/script-settings \
               --header 'Authorization: Bearer '$CLOUDFLARE_API_TOKEN \
               --header 'Content-Type: application/json' \
               -d '{"observability":{"enabled":true}}'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      # Currently Terraform Cloudflare provider doesn't support direct upload, use wrangler to upload instead.
      - name: Upload pages
        run: |
          npx wrangler pages deploy .vercel/output/static --project-name uptimeflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}